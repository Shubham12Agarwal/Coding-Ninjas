#You are given two numbers ’x’(it’s a float), and ’n’(it’s a integer).
#Your task is to calculate ‘x’ raised to power ‘n’, and return it.
#The expected time complexity is ’O(logn)’, and the expected space complexity is ’O(1)’, where ‘n’ is the power to which the number should be raised.
#Note:
#In the output, you will see the number returned by you upto 6 decimal places.
#Example:
#Input: ‘x’ = 10, ‘n’ = 4
#Output: 10000.000000
#Explanation: On raising ‘x’ to the power of ‘n’, the result is 10000.
#<br> 

def myPow(x: float, n: int) -> float:
    if n < 0:
        x = 1 / x
        n = -n

    answer = 1.0
    while n > 0:
        if n % 2 == 1:
            answer = answer*x
        x = x*x
        n //= 2

    return round(answer, 6)
